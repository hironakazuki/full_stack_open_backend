{"version":3,"sources":["services/persons.js","components/Persons.js","components/PersonForm.js","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Persons","personsToShow","persons","setPersons","map","person","key","name","number","onClick","find","n","window","confirm","personsService","filter","deletePerson","PersonForm","setSuccessMessage","setErrorMessage","useState","newName","setNewName","newNumber","setNewNumber","onSubmit","event","preventDefault","newPerson","some","updatePerson","returnedPerson","setTimeout","catch","error","status","createdPerson","concat","value","onChange","console","log","target","placeholder","type","Filter","handleSearchNameChange","searchName","Notification","successMessage","errorMessage","notificationStyle","background","fontSize","borderStyle","borderRadius","padding","marginBottom","style","color","App","setSearchName","useEffect","initialPersons","length","match","RegExp","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oOACMA,EAAU,eAsBD,EApBA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB5B,EAfA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALM,SAACG,GAEpB,OADgBP,IAAMS,OAAN,UAAgBV,EAAhB,YAA2BQ,IAC5BL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCO5BM,EAvBC,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,cAAeC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WAWzC,OACE,6BACGF,EAAcG,KAAI,SAAAC,GAAM,OACvB,uBAAGC,IAAKD,EAAOR,IACZQ,EAAOE,KADV,IACiBF,EAAOG,OACtB,4BAAQC,QAAS,kBAfJ,SAACZ,GACpB,IAAMQ,EAASH,EAAQQ,MAAK,SAAAC,GAAC,OAAIA,EAAEd,KAAOA,KACtCe,OAAOC,QAAP,iBAAyBR,EAAOE,SAGlCO,EACgBjB,GACdM,EAAWD,EAAQa,QAAO,SAAAV,GAAM,OAAIA,EAAOR,KAAOA,OAQzBmB,CAAaX,EAAOR,MAA3C,gBCyEKoB,EAzFI,SAAC,GAAiE,IAA/Df,EAA8D,EAA9DA,QAASC,EAAqD,EAArDA,WAAYe,EAAyC,EAAzCA,kBAAmBC,EAAsB,EAAtBA,gBAAsB,EACpDC,mBAAS,IAD2C,mBAC3EC,EAD2E,KAClEC,EADkE,OAEhDF,mBAAS,IAFuC,mBAE3EG,EAF2E,KAEhEC,EAFgE,KA0ElF,OACE,0BAAMC,SAvEU,SAACC,GACjBA,EAAMC,iBAEN,IAAMC,EAAY,CAChBrB,KAAMc,EACNb,OAAQe,GAKV,GAFqBrB,EAAQ2B,MAAK,SAAAxB,GAAM,OAAIA,EAAOE,OAASc,MAG1D,GAAIT,OAAOC,QAAP,UAAkBQ,EAAlB,2EAAoG,CACtG,IAAMS,EAAe5B,EAAQQ,MAAK,SAAAC,GAAC,OAAIA,EAAEJ,OAASc,KAClDP,EACUgB,EAAajC,GAAI+B,GACxBpC,MAAK,SAAAuC,GACJ5B,EAAWD,EAAQE,KAAI,SAAAC,GAAM,OAAIA,EAAOR,KAAOiC,EAAajC,GAAKQ,EAAS0B,MAC1ET,EAAW,IACXE,EAAa,IACbN,EAAkB,WAAD,OAAYY,EAAavB,OAC1CyB,YAAW,WACTd,EAAkB,QACjB,QAEJe,OAAM,SAACC,GACwB,MAA1BA,EAAMzC,SAAS0C,QACjBhB,EAAgBe,EAAMzC,SAASC,KAAKwC,OACpCF,YAAW,WACTb,EAAgB,QACf,OAEHA,EAAgB,iBAAD,OACIW,EAAavB,KADjB,0CAGfyB,YAAW,WACTb,EAAgB,QACf,KACHhB,EAAWD,EAAQa,QAAO,SAAAJ,GAAC,OAAIA,EAAEd,KAAOiC,EAAajC,iBAK7DiB,EACUc,GACPpC,MAAK,SAAA4C,GACJjC,EAAWD,EAAQmC,OAAOD,IAC1Bd,EAAW,IACXE,EAAa,IACbN,EAAkB,SAAD,OAAUkB,EAAc7B,OACzCyB,YAAW,WACTd,EAAkB,QACjB,QAEJe,OAAM,SAAAC,GACLf,EAAgBe,EAAMzC,SAASC,KAAKwC,OACpCF,YAAW,WACTb,EAAgB,QACf,UAeP,sCACQ,2BAAOmB,MAAOjB,EAASkB,SAXV,SAACb,GACxBc,QAAQC,IAAIf,EAAMgB,OAAOJ,OACzBhB,EAAWI,EAAMgB,OAAOJ,QASqCK,YAAY,mBAEvE,wCACU,2BAAOL,MAAOf,EAAWgB,SAVZ,SAACb,GAC1BF,EAAaE,EAAMgB,OAAOJ,QASyCK,YAAY,mBAE7E,6BACE,4BAAQC,KAAK,UAAb,UC7EOC,EARA,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,uBAAwBC,EAAgB,EAAhBA,WACvC,OACE,yDACoB,2BAAOT,MAAOS,EAAYR,SAAUO,EAAwBH,YAAY,kBCI1FK,EAAe,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,aAChCC,EAAoB,CACxBC,WAAY,YACZC,SAAU,GACVC,YAAa,QACbC,aAAc,EACdC,QAAS,GACTC,aAAc,IAEhB,OAAIR,EAEA,yBAAKS,MAAK,eAAMP,EAAN,CAAyBQ,MAAM,WACtCV,GAIHC,EAEA,yBAAKQ,MAAK,eAAOP,EAAP,CAA0BQ,MAAO,SACxCT,GAKL,MAkDWU,EA9CH,WAAO,IAAD,EACcxC,mBAAS,IADvB,mBACTlB,EADS,KACAC,EADA,OAEoBiB,mBAAS,IAF7B,mBAET2B,EAFS,KAEGc,EAFH,OAG4BzC,mBAAS,MAHrC,mBAGT6B,EAHS,KAGO/B,EAHP,OAIwBE,mBAAS,MAJjC,mBAIT8B,EAJS,KAIK/B,EAJL,KAOhB2C,qBAAU,WACRtB,QAAQC,IAAI,UACZ3B,IAEGtB,MAAK,SAAAuE,GACJvB,QAAQC,IAAI,qBACZtC,EAAW4D,QAEd,CAAC5D,IAGJqC,QAAQC,IAAR,gBAAqBvC,EAAQ8D,SAC7B,IAIM/D,EAA+B,KAAf8C,EAClB7C,EACAA,EAAQa,QAAO,SAAAV,GAAM,OAAIA,EAAOE,KAAK0D,MAAM,IAAIC,OAAOnB,EAAY,UAEtE,OACE,6BACE,yCAEA,kBAAC,EAAD,CAAcE,eAAgBA,EAAgBC,aAAcA,IAE5D,kBAAC,EAAD,CAAQJ,uBAdmB,SAACpB,GAC9BmC,EAAcnC,EAAMgB,OAAOJ,QAa+BS,WAAYA,IAEpE,yCAEA,kBAAC,EAAD,CAAY7C,QAASA,EAASC,WAAYA,EAAYe,kBAAmBA,EAAmBC,gBAAiBA,IAE7G,uCAEA,kBAAC,EAAD,CAASlB,cAAeA,EAAeC,QAASA,EAASC,WAAYA,MClEvDgE,QACW,cAA7BvD,OAAOwD,SAASC,UAEe,UAA7BzD,OAAOwD,SAASC,UAEhBzD,OAAOwD,SAASC,SAASJ,MACvB,2DCZNK,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrF,MAAK,SAAAsF,GACJA,EAAaC,gBAEd9C,OAAM,SAAAC,GACLM,QAAQN,MAAMA,EAAM8C,c","file":"static/js/main.c0f52c59.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deletePerson = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, deletePerson }","import React from 'react'\n\nimport personsService from '../services/persons'\n\nconst Persons = ({ personsToShow, persons, setPersons}) => {\n  const deletePerson = (id) => {\n    const person = persons.find(n => n.id === id)\n    if (window.confirm(`Delete ${person.name}`)) {\n      \n\n      personsService\n        .deletePerson(id)\n        setPersons(persons.filter(person => person.id !== id))\n    }\n  }\n  return(\n    <div>\n      {personsToShow.map(person =>\n        <p key={person.id}>\n          {person.name} {person.number}\n          <button onClick={() => deletePerson(person.id)}>delete</button>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Persons\n\n","import React, { useState } from 'react'\n\nimport personsService from '../services/persons'\n\nconst PersonForm = ({ persons, setPersons, setSuccessMessage, setErrorMessage }) => {\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n\n    const validateName = persons.some(person => person.name === newName)\n    \n    if (validateName) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const updatePerson = persons.find(n => n.name === newName)\n        personsService\n          .update(updatePerson.id, newPerson)\n          .then(returnedPerson => {\n            setPersons(persons.map(person => person.id !== updatePerson.id ? person : returnedPerson))\n            setNewName('')\n            setNewNumber('')\n            setSuccessMessage(`Updated ${updatePerson.name}`)\n            setTimeout(() => {\n              setSuccessMessage(null)\n            }, 5000)\n          })\n          .catch((error) => {\n            if (error.response.status === 400) {\n              setErrorMessage(error.response.data.error)\n              setTimeout(() => {\n                setErrorMessage(null)\n              }, 5000)\n            } else {\n              setErrorMessage(\n                `Infomation of ${updatePerson.name} has already been removed from server`\n              )\n              setTimeout(() => {\n                setErrorMessage(null)\n              }, 5000)\n              setPersons(persons.filter(n => n.id !== updatePerson.id))\n            }\n          })\n      }\n    } else {\n      personsService\n        .create(newPerson)\n        .then(createdPerson => {\n          setPersons(persons.concat(createdPerson))\n          setNewName('')\n          setNewNumber('')\n          setSuccessMessage(`Added ${createdPerson.name}`)\n          setTimeout(() => {\n            setSuccessMessage(null)\n          }, 5000)\n        })\n        .catch(error => {\n          setErrorMessage(error.response.data.error)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n  \n  return(\n    <form onSubmit={addPerson}>\n      <div>\n        name: <input value={newName} onChange={handleNameChange} placeholder='a new person.' />\n      </div>\n      <div>\n        number: <input value={newNumber} onChange={handleNumberChange} placeholder='a new number.' />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nexport default PersonForm\n","import React from 'react'\n\nconst Filter = ({handleSearchNameChange, searchName}) => {\n  return (\n    <>\n      filter shown with <input value={searchName} onChange={handleSearchNameChange} placeholder='search name' />\n    </>\n  )\n}\n\nexport default Filter\n","import React, { useState, useEffect } from 'react'\n\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport Filter from './components/Filter'\n\nimport personsService from './services/persons'\n\n\nconst Notification = ({ successMessage, errorMessage }) => {\n  const notificationStyle = {\n    background: 'lightgrey',\n    fontSize: 20,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10,\n  }\n  if (successMessage) {\n    return (\n      <div style={{...notificationStyle, color:'green'}} >\n        {successMessage}\n      </div>\n    )\n  }\n  if (errorMessage) {\n    return (\n      <div style={{ ...notificationStyle, color: 'red' }} >\n        {errorMessage}\n      </div>\n    )\n  }\n  return (\n    null\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [searchName, setSearchName] = useState('')\n  const [successMessage, setSuccessMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n\n  useEffect(() => {\n    console.log('effect')\n    personsService\n      .getAll()\n      .then(initialPersons => {\n        console.log('promise fulfilled')\n        setPersons(initialPersons)\n      })\n  }, [setPersons])\n\n  \n  console.log(`those ${persons.length}`)\n  const handleSearchNameChange = (event) => {\n    setSearchName(event.target.value)\n  }\n\n  const personsToShow = searchName === ''\n    ? persons\n    : persons.filter(person => person.name.match(new RegExp(searchName, 'ig')))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification successMessage={successMessage} errorMessage={errorMessage} />\n\n      <Filter handleSearchNameChange={handleSearchNameChange} searchName={searchName} />\n\n      <h3>add a new</h3>\n\n      <PersonForm persons={persons} setPersons={setPersons} setSuccessMessage={setSuccessMessage} setErrorMessage={setErrorMessage} />\n\n      <h3>Numbers</h3>\n      \n      <Persons personsToShow={personsToShow} persons={persons} setPersons={setPersons} />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}